const express = require('express');
const { Server } = require('socket.io');
const { createServer } = require("http");
const { spawn } = require('child_process');

const PORT = process.env.PORT;
const app = express();
const server = createServer(app);
const io = new Server(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"],
        credentials: true
    }
});
function isValidJSON(str) {
    try {
        JSON.parse(str);
        return true;
    } catch (e) {
        return false;
    }
}
io.on("connection", async (socket) => {
    console.log("User Connected")
    try {
        socket.on("scanVulnerability", (data) => {
            const { url, scanType } = data;
            // Execute the Python script with unbuffered output
            const pythonProcess = spawn('python', ['-u', './final.py', 'full', url]);
            // Handle stdout of the Python script
            pythonProcess.stdout.on('data', (data) => {
                // Split data into lines
                const lines = data.toString().split('\n');
                // Emit each line to the client
                lines.forEach(line => {
                    console.log(line)
                    if (line != "") {
                        try {
                            const data = JSON.parse(line);
                            if (data.type == "realTimeUpdate") {
                                socket.emit("realTimeUpdates", line)
                            }
                            if (data.type == "warning") {
                                socket.emit("warning", line);
                            }
                            if (data.type != "vulnerability") {
                                socket.emit("vulnerability", line);
                            }
                            if (data.type == "result") {
                                socket.emit("result", line);
                            }
                            if (data.type == "start") {
                                socket.emit("start", line);
                            }
                            if (data.type == "stop") {
                                socket.emit("stop", line);
                            }
                            if (data.type == "info") {
                                socket.emit("info", line);
                            }
                        } catch (error) {
                            console.log(line)
                            socket.emit("vulnRespError", line);
                        };
                    };
                });
            });
            socket.on("disconnect", () => {
                pythonProcess.kill();
            });
            pythonProcess.stderr.on('data', (data) => {
                const error = data.toString();
                socket.emit("vulnRespError", error);
            });
            pythonProcess.on('close', (code) => {
                socket.emit("stop", "Scan Completed");
            });
        });
    } catch (error) {
        console.log(error)
    }
});

server.listen(5000, () => {
    console.log("Listening on port : 5000")
});
