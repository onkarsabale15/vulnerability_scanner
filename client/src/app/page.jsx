"use client"
import Hero from "@/components/Hero";
import Result from "@/components/Result";
import { useState, useEffect } from "react";
import { io } from "socket.io-client";

export default function Home() {
  const [socket, setSocket] = useState(null);
  const [result, setResult] = useState([]);
  const [realTimeUpdates, setRealTimeUpdates] = useState(null);
  const [warning, setWarning] = useState([]);
  const [isScanning, setIsScanning] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);

  const socketConnection = (url) => {
    const soc = io("http://localhost:5000");
    setSocket(soc);

    soc.on("connect", () => {
      soc.emit("scanVulnerability", { url, scanType: "full" });
      setIsScanning(true);
    });

    soc.on("realTimeUpdates", (data) => {
      const dt = JSON.parse(data);
      setRealTimeUpdates(dt);
    });
    soc.on("info", (data) => {
      const dt = JSON.parse(data);
      setRealTimeUpdates(dt);
    });

    soc.on("warning", (data) => {
      data = JSON.parse(data)
      if(data.type == "warning") {
        setWarning((prevResult) => [...prevResult, data]);
      }
    });

    soc.on("vulnerability", (data) => {
      data = JSON.parse(data)
      if(data.type == "vulnerability") {
        setWarning((prevResult) => [...prevResult, data]);
      }
    });

    soc.on("result", (data) => {
      data = JSON.parse(data)
      if (data.type == "result") {
        setResult((prevResult) => [...prevResult, data]);
      }
    });
    soc.on("end", () => {
      setIsCompleted(true);
      setIsScanning(false);
    });

    soc.on("disconnect", () => {
      setSocket(null);
    });
  };

  useEffect(() => {
    return () => {
      if (socket) {
        socket.disconnect();
      }
    };
  }, [socket]);
  useEffect(()=>{
    console.log(warning)
  },[warning])

  const handleStartScan = (url) => {
    alert("Scanning started")
    if (url && url.trim()) {
      socketConnection(url);
    }
  };

  return (
    <>
    <div className="bg-white">
      <Hero handleStartScan={handleStartScan} realTimeUpdates={realTimeUpdates}/>
      {isScanning && <Result result={result} warning={warning}/>}
    </div>
  </>
  );
}
